pipeline {
    agent none
    environment {
        GHCR_REGISTRY = 'ghcr.io' // GitHub Container Registry
        GHCR_USER = 'ASDFASDF' // This can technically be anything. The GitHub PAT is what actually authenticates to GHCR.
        // GHCR_REPOSITORY = 'your-github-username/your-image-name' # Actually, get this dynamically from Jenkins env vars
        GHCR_CREDENTIALS_ID = 'umerx-ghcr-packages-read-write' // Jenkins Credentials ID for a GitHub PAT Token with read/write access to GHCR packages
    }
    stages {
        // Check out this way to detect if you are building a tag or not: https://www.youtube.com/watch?v=saiCjlJpfdA
        stage('Exit early') {
            agent any
            when {
                not {
                    anyOf {
                        buildingTag();
                        branch 'main';
                    }
                }
            }
            steps {
                script {
                    echo "Not building. Exiting pipeline with 'NOT_BUILT' status."
                    currentBuild.result = 'NOT_BUILT'
                    error("No changes detected; exiting pipeline.")
                    exit 1
                    return
                }
            }
        }
        stage('Test') {
            agent any
            steps {
                cleanWs()
                checkout scm
                script {
                    // Launch the MySQL container with the specific network
                    docker.image('mysql:8.2.0').withRun('--name "${BUILD_TAG}_db" -e "MYSQL_ROOT_PASSWORD=db" -e "MYSQL_DATABASE=db" -e "MYSQL_USER=db" -e "MYSQL_PASSWORD=db"') { mysqlContainer ->
                        def myEnv = docker.build("${BUILD_TAG}", "-f Dockerfile.test .")
                        // Authenticate with GitHub Container Registry (ghcr.io) and then pull the image
                        myEnv.inside(
                            "--link ${mysqlContainer.id} -e DB_HOSTNAME=${BUILD_TAG}_db -e DB_NAME=db -e DB_USER=db -e DB_PASSWORD=db"
                        ) {
                            sh 'npm run build'
                            sh '''
                            until npm run connect 1>/dev/null 2>&1; do
                                echo "Waiting for DB to be ready..."
                                sleep 1
                            done
                            '''
                            sh 'npm run migrate'
                            sh 'npm run seed'
                            sh 'npm run test'
                        }
                    }
                }
            }
            post {
                always {
                    cleanWs(notFailBuild: true)
                }
            }
        }
        stage('Define vars') {
            agent any
            steps {
                script {
                    def gitUrl = env.GIT_URL
                    def matcher = gitUrl =~ /https:\/\/github\.com\/([^\/]+)\/([^\/]+)\.git/
                    if (matcher.matches()) {
                        env.GITHUB_REPOSITORY_OWNER = matcher[0][1]
                        env.GITHUB_REPOSITORY_NAME = matcher[0][2]
                        echo "Owner: ${env.GITHUB_REPOSITORY_OWNER}, Repo: ${env.GITHUB_REPOSITORY_NAME}"
                    } else {
                        error "Failed to extract owner and repo from GIT_URL"
                    }
                    // When building the main branch, use the 'latest' tag
                    env.DYNAMIC_TAG_NAME = env.GIT_BRANCH == 'main' ? 'latest' : env.TAG_NAME
                    env.GHCR_REPOSITORY = "${env.GITHUB_REPOSITORY_OWNER}/${env.GITHUB_REPOSITORY_NAME}".toLowerCase()
                    env.LABEL_ORG_OPENCONTAINERS_IMAGE_SOURCE = "https://github.com/${env.GITHUB_REPOSITORY_OWNER}/${env.GITHUB_REPOSITORY_NAME}"
                }
            }
        }
        stage('Build and Push Images') {
            parallel {
                stage('Build for amd64') {
                    agent { label 'docker && amd64' }
                    steps {
                        script {
                            withCredentials([conjurSecretCredential(credentialsId: GHCR_CREDENTIALS_ID,
                                                             variable: 'GHCR_PAT')]) {
                                sh '''
                                echo $GHCR_PAT | wc -m
                                echo "${GHCR_PAT}" | docker login "${GHCR_REGISTRY}" -u "${GHCR_USER}" --password-stdin
                                docker build --label "org.opencontainers.image.source=${LABEL_ORG_OPENCONTAINERS_IMAGE_SOURCE}" --target prod -t ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}-amd64 .
                                docker image inspect ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}-amd64
                                docker push ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}-amd64
                                '''
                            }
                        }
                    }
                    post {
                        always {
                            cleanWs(notFailBuild: true)
                        }
                    }
                }
                stage('Build for arm64') {
                    agent { label 'docker && arm64' }
                    steps {
                        script {
                            withCredentials([conjurSecretCredential(credentialsId: GHCR_CREDENTIALS_ID,
                                                             variable: 'GHCR_PAT')]) {
                                sh '''
                                echo $GHCR_PAT | wc -m
                                echo "${GHCR_PAT}" | docker login "${GHCR_REGISTRY}" -u "${GHCR_USER}" --password-stdin
                                docker build --label "org.opencontainers.image.source=${LABEL_ORG_OPENCONTAINERS_IMAGE_SOURCE}" --target prod -t ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}-arm64 .
                                docker image inspect ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}-arm64
                                docker push ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}-arm64
                                '''
                            }
                        }
                    }
                    post {
                        always {
                            cleanWs(notFailBuild: true)
                        }
                    }
                }
            }
        }
        stage('Create and Push Manifest') {
            agent { label 'docker' } // Or use any node with Docker CLI
            steps {
                script {
                    withCredentials([conjurSecretCredential(credentialsId: GHCR_CREDENTIALS_ID,
                                                        variable: 'GHCR_PAT')]) {
                        sh '''
                        echo "${GHCR_PAT}" | docker login ${GHCR_REGISTRY} -u "${GHCR_USER}" --password-stdin

                        docker manifest rm ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME} || true

                        docker manifest create ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME} \
                            ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}-amd64 \
                            ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}-arm64 --amend

                        docker manifest annotate ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME} \
                            ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}-amd64 --os linux --arch amd64

                        docker manifest annotate ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME} \
                            ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}-arm64 --os linux --arch arm64

                        # dump the manifest to see what it looks like
                        docker manifest inspect ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}

                        docker manifest push ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME} --purge
                        '''
                    }
                }
            }
        }
    }
}
